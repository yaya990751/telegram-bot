import asyncio
import json
import os
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER = os.getenv("TELEGRAM_PAY_TOKEN")

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
SERVICE_ACCOUNT_FILE = "sfybot-03184c7b622d.json"
SHEET_ID = "19i-_I-DMeFSA3tNCgpm5P90y_PZfAcICkYy0Qq1wT0U"

def get_google_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SHEET_ID).sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    return sheet

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ Google Sheets
def load_subscriptions():
    sheet = get_google_sheet()
    data = sheet.get_all_records()
    subscriptions = {}
    
    for row in data:
        sub_id = row["ID –ø–æ–¥–ø–∏—Å–∫–∏"]
        subscriptions[sub_id] = {
            "name": row["–ù–∞–∑–≤–∞–Ω–∏–µ"],
            "price": int(row["–¶–µ–Ω–∞"] * 100),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
            "status": row["–°—Ç–∞—Ç—É—Å"],
            "buyer": row.get("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "")
        }
    return subscriptions

# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
def update_subscription(sub_id, buyer_id):
    sheet = get_google_sheet()
    data = sheet.get_all_records()

    print(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É {sub_id}: —Å—Ç–∞—Ç—É—Å '–í—ã–∫—É–ø–ª–µ–Ω–æ', –ø–æ–∫—É–ø–∞—Ç–µ–ª—å {buyer_id}")  # üîπ –û—Ç–ª–∞–¥–∫–∞

    for i, row in enumerate(data, start=2):
        if row["ID –ø–æ–¥–ø–∏—Å–∫–∏"] == sub_id:
            sheet.update(f"D{i}", "–í—ã–∫—É–ø–ª–µ–Ω–æ")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ 'D' ‚Äî —ç—Ç–æ "–°—Ç–∞—Ç—É—Å"
            sheet.update(f"E{i}", str(buyer_id))  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ 'E' ‚Äî —ç—Ç–æ "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
            break

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start(message: types.Message):
    subscriptions = load_subscriptions()
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:" 

    keyboard = InlineKeyboardBuilder()
    for sub_id, sub in subscriptions.items():
        if sub["status"].lower() != "–≤—ã–∫—É–ø–ª–µ–Ω–æ":
            keyboard.button(text=f"{sub['name']} ‚Äî {sub['price'] / 100} —Ä—É–±.", callback_data=str(sub_id))
    
    keyboard.adjust(1)
    await message.answer(text, reply_markup=keyboard.as_markup())

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏
@router.callback_query()
async def process_callback(callback: types.CallbackQuery):
    subscriptions = load_subscriptions()
    sub_id = callback.data

    if sub_id not in subscriptions or subscriptions[sub_id]["status"].lower() == "–≤—ã–∫—É–ø–ª–µ–Ω–æ":
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –≤—ã–∫—É–ø–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    sub = subscriptions[sub_id]
    prices = [LabeledPrice(label=sub["name"], amount=sub["price"])]

    await bot.send_invoice(
        callback.from_user.id,
        title=sub["name"],
        description=f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ {sub['name']}",
        payload=sub_id,
        provider_token=PAYMENT_PROVIDER,
        currency="RUB",
        prices=prices
    )
    await callback.answer()

# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@router.message(F.successful_payment)
async def successful_payment(message: types.Message):
    sub_id = message.successful_payment.invoice_payload
    buyer_id = message.from_user.id
    update_subscription(sub_id, buyer_id)
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
